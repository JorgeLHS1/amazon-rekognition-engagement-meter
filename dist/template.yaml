AWSTemplateFormatVersion: 2010-09-09
Globals:
  Api:
    Cors:
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowMethods: '''*'''
      AllowOrigin: '''*'''
  Function:
    Environment:
      Variables:
        API_GATEWAY:
          Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/PROD
        COGNITO_IDENTITY_POOL:
          Ref: cognitoIdentityPool
        COLLECTION_ID:
          Ref: CollectionId
        FROM_BUCKET: matteo-rekognition-demo-test
        REGION:
          Ref: AWS::Region
        TO_BUCKET:
          Ref: clientS3Bucket
Outputs:
  url:
    Description: Engagement meter URL
    Value:
      Fn::Sub: https://${clientS3Bucket}.s3-${AWS::Region}.amazonaws.com/index.html
Parameters:
  CollectionId:
    AllowedPattern: ^[a-zA-Z0-9_]*$
    Default: RekogDemo
    Type: String
Resources:
  ApiGatewayInvokeRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Effect: Allow
          Principal:
            Federated:
            - cognito-identity.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
    Type: AWS::IAM::Role
  DbReadRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
    Type: AWS::IAM::Role
  DbWriteRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
    Type: AWS::IAM::Role
  RekognitionInvokeRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
    Type: AWS::IAM::Role
  RestApi:
    Name:
      Fn::Sub: RekogDemo-${CollectionId}
    Properties:
      DefinitionBody:
        basePath: /PROD
        info:
          title:
            Fn::Sub: RekogDemo-${CollectionId}
          version: 1.0
        paths:
          /engagement:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - DbReadRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"TableName\": \"${sentimentDynamoDBTable}\",\n\
                      \  \"IndexName\": \"gsiSentiment\",\n  \"KeyConditionExpression\"\
                      : \"CollectionId = :cid\",\n  \"FilterExpression\": \"TimeDetected\
                      \ >= :td\",\n  \"ProjectionExpression\": \"Angry,Confused,Happy,Sad,Surprised\"\
                      ,\n  \"ExpressionAttributeValues\": {\n    \":cid\": {\n   \
                      \   \"S\": \"${CollectionId}\"\n    },\n    \":td\": {\n   \
                      \   \"N\": \"$input.params().querystring.get('timeDetected')\"\
                      \n    }\n  }\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\n{\n\
                        \  \"results\": [\n    #foreach($elem in $inputRoot.Items)\
                        \ {\n      \"angry\": \"$elem.Angry.S\",\n      \"confused\"\
                        : \"$elem.Confused.S\",\n      \"happy\": \"$elem.Happy.S\"\
                        ,\n      \"sad\": \"$elem.Sad.S\",\n      \"surprised\": \"\
                        $elem.Surprised.S\"\n    }#if($foreach.hasNext),#end\n   \
                        \ #end\n  ]\n}\n"
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - DbWriteRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"TableName\": \"${sentimentDynamoDBTable}\",\n\
                      \  \"Item\": {\n    \"CollectionId\": {\n      \"S\": \"${CollectionId}\"\
                      \n    },\n    \"TimeDetected\": {\n      \"N\": \"$input.json('$.timeDetected')\"\
                      \n    },\n    \"Angry\": {\n      \"S\": \"$input.json('$.angry')\"\
                      \n    },\n    \"Confused\": {\n      \"S\": \"$input.json('$.confused')\"\
                      \n    },\n    \"Happy\": {\n      \"S\": \"$input.json('$.happy')\"\
                      \n    },\n    \"Sad\": {\n      \"S\": \"$input.json('$.sad')\"\
                      \n    },\n    \"Surprised\": {\n      \"S\": \"$input.json('$.surprised')\"\
                      \n    }\n  }\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: "{\n  \"ok\": true\n}\n"
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
          /faces/add:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - RekognitionInvokeRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                  integration.request.header.X-Amz-Target: '''RekognitionService.IndexFaces'''
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"CollectionId\": \"${CollectionId}\",\n  \"ExternalImageId\"\
                      : $input.json('$.externalImageId'),\n  \"Image\": {\n    \"\
                      Bytes\": $input.json('$.image')\n  }\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:rekognition:path//
          /faces/detect:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - RekognitionInvokeRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                  integration.request.header.X-Amz-Target: '''RekognitionService.DetectFaces'''
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"Attributes\": [\"ALL\"],\n  \"Image\": {\n  \
                      \  \"Bytes\": $input.json('$.image')\n  }\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:rekognition:path//
          /faces/search:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - RekognitionInvokeRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                  integration.request.header.X-Amz-Target: '''RekognitionService.SearchFacesByImage'''
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"CollectionId\": \"${CollectionId}\",\n  \"FaceMatchThreshold\"\
                      : 85,\n  \"MaxFaces\": 5,\n  \"Image\": {\n    \"Bytes\": $input.json('$.image')\n\
                      \  }\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:rekognition:path//
          /people:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - DbReadRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"TableName\": \"${facesDynamoDBTable}\",\n  \"\
                      KeyConditionExpression\": \"CollectionId = :cid\",\n  \"ProjectionExpression\"\
                      : \"MemberName,JobTitle,ExternalImageId\",\n  \"ExpressionAttributeValues\"\
                      : {\n    \":cid\": {\n      \"S\": \"${CollectionId}\"\n   \
                      \ }\n  }\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\n{\n\
                        \  \"people\": [\n    #foreach($elem in $inputRoot.Items)\
                        \ {\n      \"externalImageId\": \"$elem.ExternalImageId.S\"\
                        ,\n      \"memberName\": \"$elem.MemberName.S\",\n      \"\
                        jobTitle\": \"$elem.JobTitle.S\"\n    }#if($foreach.hasNext),#end\n\
                        \    #end\n  ]\n}\n"
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - DbWriteRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"TableName\": \"${facesDynamoDBTable}\",\n  \"\
                      Item\": {\n    \"CollectionId\": {\n      \"S\": \"${CollectionId}\"\
                      \n    },\n    \"ExternalImageId\": {\n      \"S\": $input.json('$.externalImageId')\n\
                      \    },\n    \"JobTitle\": {\n      \"S\": $input.json('$.jobTitle')\n\
                      \    },\n    \"MemberName\": {\n      \"S\": $input.json('$.memberName')\n\
                      \    }\n  }\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: "{\n  \"ok\": true\n}\n"
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
        securityDefinitions:
          sigv4:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authtype: awsSigv4
        swagger: 2.0
      EndpointConfiguration: REGIONAL
      StageName: PROD
    Type: AWS::Serverless::Api
  clientS3Bucket:
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
          Id:
            Fn::Sub: RekogCorsRule${CollectionId}
          MaxAge: '3600'
    Type: AWS::S3::Bucket
  cognitoIdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: true
      IdentityPoolName:
        Fn::Sub: RekogIdentityPool${CollectionId}
    Type: AWS::Cognito::IdentityPool
  cognitoIdentityPoolRole:
    Properties:
      IdentityPoolId:
        Ref: cognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - ApiGatewayInvokeRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - ApiGatewayInvokeRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  facesDynamoDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: CollectionId
        AttributeType: S
      - AttributeName: ExternalImageId
        AttributeType: S
      - AttributeName: MemberName
        AttributeType: S
      - AttributeName: JobTitle
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: geGSI
        KeySchema:
        - AttributeName: JobTitle
          KeyType: HASH
        - AttributeName: MemberName
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - CollectionId
          - ExternalImageId
          ProjectionType: INCLUDE
      KeySchema:
      - AttributeName: CollectionId
        KeyType: HASH
      - AttributeName: ExternalImageId
        KeyType: RANGE
      TableName:
        Fn::Sub: RekogFaces${CollectionId}
    Type: AWS::DynamoDB::Table
  lambdaSetup:
    Properties:
      CodeUri: s3://matteo-rekognition-demo-test/7b675b73e5acd3b9367e99242485e9eb
      Description:
        Fn::Sub: Custom Lambda resource for the ${CollectionId} Cloudformation Stack
      FunctionName:
        Fn::Sub: RekogDemoSetup${CollectionId}
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - setupLambdaRole
        - Arn
      Runtime: nodejs8.10
      Timeout: 30
    Type: AWS::Serverless::Function
  sentimentDynamoDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: CollectionId
        AttributeType: S
      - AttributeName: TimeDetected
        AttributeType: N
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: gsiSentiment
        KeySchema:
        - AttributeName: CollectionId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      KeySchema:
      - AttributeName: CollectionId
        KeyType: HASH
      - AttributeName: TimeDetected
        KeyType: RANGE
      TableName:
        Fn::Sub: RekogSentiment${CollectionId}
    Type: AWS::DynamoDB::Table
  setupLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: s3:*
            Effect: Allow
            Resource: '*'
        PolicyName: RekogDemo-setup-S3-fc
      - PolicyDocument:
          Statement:
          - Action: rekognition:*
            Effect: Allow
            Resource: '*'
        PolicyName: RekogDemo-createRekColl
      - PolicyDocument:
          Statement:
          - Action: logs:*
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
        PolicyName: RekogDemo-cloudwatch-logs
    Type: AWS::IAM::Role
  setupS3AndRekognition:
    Properties:
      Region:
        Ref: AWS::Region
      ServiceToken:
        Fn::GetAtt:
        - lambdaSetup
        - Arn
    Type: Custom::Setup
Transform: AWS::Serverless-2016-10-31
