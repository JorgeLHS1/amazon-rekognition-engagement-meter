AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Globals:
  Function:
    Environment:
      Variables:
        SENTIMENT_TABLE: !Ref sentimentDynamoDBTable
        SENTIMENT_IDX: 'gsiSentiment'
        FACES_TABLE: !Ref facesDynamoDBTable
        REK_COLLECTION_ID: 'rekog-demo'
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
Resources:
  ###################################
  # S3 - for static web site
  ###################################
  clientS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET]
          AllowedOrigins: ['*']
          Id: myCORSRuleId1
          MaxAge: '3600'
  ###################################
  # Cognito - for unauth API calls
  ###################################
  RekogIDPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: rekog_id_pool
      AllowUnauthenticatedIdentities: true
  ###################################
  # DynamoDB tables
  ###################################
  # meta-data for uploaded images
  facesDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "rekog_ddb_faces"
      AttributeDefinitions: 
        - 
          AttributeName: "collectionID"
          AttributeType: "S"
        - 
          AttributeName: "ExternalImageID"
          AttributeType: "S"
        - 
          AttributeName: "MemberName"
          AttributeType: "S"
        - 
          AttributeName: "JobTitle"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "collectionID"
          KeyType: "HASH"
        - 
          AttributeName: "ExternalImageID"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "geGSI"
          KeySchema: 
            - 
              AttributeName: "JobTitle"
              KeyType: "HASH"
            - 
              AttributeName: "MemberName"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "collectionID"
              - "ExternalImageID"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
  # sentiment historical data
  sentimentDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "rekog_ddb_sentiment"
      AttributeDefinitions: 
        - 
          AttributeName: "collectionID"
          AttributeType: "S"
        - 
          AttributeName: "TimeDetected"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "collectionID"
          KeyType: "HASH"
        - 
          AttributeName: "TimeDetected"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "gsiSentiment"
          KeySchema: 
            - 
              AttributeName: "collectionID"
              KeyType: "HASH"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
  # detected faces
  detectedDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "rekog_ddb_detected"
      AttributeDefinitions: 
        - 
          AttributeName: "ExternalImageID"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "ExternalImageID"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
  #######################
  # IAM Roles
  #######################
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -  Effect: "Allow"
             Principal:
               Service:
                 - 'lambda.amazonaws.com'
             Action:
               - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: AllowLambdaSimulateAccess
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: ['logs:CreateLogGroup',
                'logs:CreateLogStream',
                'logs:PutLogEvents']
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action: ['config:GetResourceConfigHistory',
                'config:PutEvaluations',
                'config:StartConfigRulesEvaluation',
                'iam:GetPolicy',
                'iam:GetPolicyVersion',
                'iam:SimulateCustomPolicy',
                'iam:ListEntitiesforPolicy',
                'iam:GetGroup',
                'logs:*',
                's3:GetBucketPolicy']
              Resource: '*'
  AppDDBReadRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: Rekog-Demo-readDDB
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: [
                  'dynamodb:GetItem',
                  'dynamodb:Query',
                  'dynamodb:Scan'
                  ]
              Resource:
                - !GetAtt facesDynamoDBTable.Arn
                - !GetAtt sentimentDynamoDBTable.Arn
  AppDDBWriteRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: Rekog-Demo-writeDDB
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: [
                  'dynamodb:GetItem',
                  'dynamodb:GetRecords',
                  'dynamodb:PutItem',
                  'dynamodb:Query',
                  'dynamodb:Scan',
                  'dynamodb:UpdateItem'
                  ]
              Resource:
                - !GetAtt sentimentDynamoDBTable.Arn
  setupDemoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: Rekog-Demo-setup-S3-fc
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 's3:*'
              Resource: '*'
        - PolicyName: Rekog-demo-createRekColl
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 'rekognition:*'
              Resource: '*'
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 'logs:*'
              Resource: 'arn:aws:logs:*:*:*'
  ########################################
  # API Gateway
  ########################################
  sentimentAPI:
    Name: 'sam-sentimentAPI'
    Type: AWS::Serverless::Api
    Properties:
      StageName: 'PROD'
      EndpointConfiguration: 'REGIONAL'
      DefinitionBody:
        swagger: 2.0
        info:
          version: 1.0
          title: 'SAM-Sentiment-API'
        paths:
          "/people":
            get:
              responses:
                '200':
                  description: Project profiles
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getPeople.Arn}/invocations
                httpMethod: POST
                type: aws
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin : "'*'"
          "/engagement":
            get:
              responses:
                '200':
                  description: Project profiles
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getEngagement.Arn}/invocations
                httpMethod: POST
                type: aws
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin : "'*'"
          "/sentiment":
            get:
              responses:
                '200':
                  description: Project profiles
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getSentiment.Arn}/invocations
                httpMethod: POST
                type: aws
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin : "'*'"
            post:
              responses:
                '200':
                  description: Project profiles
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${postSentiment.Arn}/invocations
                httpMethod: POST
                type: aws
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin : "'*'"
        securityDefinitions:
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"
  ############################
  # Lambda functions
  ############################
  # Get People from DynamoDB table with faces registered in Rekognition
  getPeople:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rekog_getPeople
      Runtime: nodejs6.10
      Handler: index.handler
      CodeUri: 's3://ge-demos/rekog/lambda/get-people.zip'
      Description: "Get people meta-data from DynamoDB"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt AppDDBReadRole.Arn
      Events:
        GetPeople:
          Type: Api
          Properties:
            Path: /people
            Method: get
            RestApiId: !Ref sentimentAPI
  getSentiment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rekog_getSentiments
      Runtime: nodejs6.10
      Handler: index.handler
      CodeUri: 's3://ge-demos/rekog/lambda/get-sentiments.zip'
      Description: "Get sentiment data from DynamoDB"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt AppDDBReadRole.Arn
      Events:
        GetSentiment:
          Type: Api
          Properties:
            Path: /sentiment
            Method: get
            RestApiId: !Ref sentimentAPI
  postSentiment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rekog_postSentiments
      Runtime: nodejs6.10
      Handler: index.handler
      CodeUri: 's3://ge-demos/rekog/lambda/post-sentiments.zip'
      Description: "Post sentiment data to DynamoDB"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt AppDDBWriteRole.Arn
      Events:
        PostSentiment:
          Type: Api
          Properties:
            Path: /sentiment
            Method: post
            RestApiId: !Ref sentimentAPI
  getEngagement:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rekog_getEngagement
      Runtime: nodejs6.10
      Handler: index.handler
      CodeUri: 's3://ge-demos/rekog/lambda/get-engagement.zip'
      Description: "Get engagement point in time data from DynamoDB"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt AppDDBReadRole.Arn
      Events:
        GetEngagement:
          Type: Api
          Properties:
            Path: /engagement
            Method: get
            RestApiId: !Ref sentimentAPI
  setupClientCode:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rekog_S3ClientCopy
      Runtime: nodejs8.10
      Handler: index.handler
      CodeUri: 's3://ge-demos/rekog/lambda/setup-client.zip'
      Description: "Copy client code and modify for new CF created endpoints"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt setupDemoRole.Arn
      Environment:
        Variables:
          S3_DEST: !Ref clientS3Bucket
          API_GW_URL: !Sub https://${sentimentAPI}.execute-api.${AWS::Region}.amazonaws.com/PROD
          COG_ID_POOL: !Ref RekogIDPool
          S3_SRC: 'ge-demos'
          S3_SRC_PATH: 'rekog/client/'
          S3_FILEREF: 'rekog/client/fileList.txt'
#####################################################
# Parameter Store
#####################################################
  myParams:
    Type: AWS::SSM::Parameter
    Properties:
      Description: 'Cognito ID Pool'
      Type: String
      Value: !Ref RekogIDPool
#####################################################
# Outputs
#####################################################
Outputs:
  apiGatewayUrl:
    Description: 'Deployed API Gateway stage URL for Prod'
    Value: !Sub https://${sentimentAPI}.execute-api.${AWS::Region}.amazonaws.com/PROD
  cognitoIdPoolId:
    Description: 'Pool ID for Cognito auth for API methods'
    Value: !Ref RekogIDPool
  bucketName:
    Value: !Ref clientS3Bucket
    Description: Name of the sample Amazon S3 bucket with CORS enabled.