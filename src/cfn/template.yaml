AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Globals:
  Function:
    Environment:
      Variables:
        API_GATEWAY: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/PROD
        COGNITO_IDENTITY_POOL: !Ref cognitoIdentityPool
        COLLECTION_ID: !Ref CollectionId
        FROM_BUCKET: matteo-rekognition-demo-test
        REGION: !Ref AWS::Region
        TO_BUCKET: !Ref clientS3Bucket
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
Parameters:
  CollectionId:
    Type: String
    Default: RekogDemo
    AllowedPattern : "^[a-zA-Z0-9_]*$"
Resources:
  ###################################
  # Custom Resources
  ###################################
  setupS3AndRekognition:
    Type: Custom::Setup
    Properties:
      ServiceToken: !GetAtt lambdaSetup.Arn
      Region: !Ref AWS::Region
  ###################################
  # S3 - for static web site
  ###################################
  clientS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET]
          AllowedOrigins: ['*']
          Id: !Sub RekogCorsRule${CollectionId}
          MaxAge: '3600'
  ###################################
  # Cognito - for unauth API calls
  ###################################
  cognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub RekogIdentityPool${CollectionId}
      AllowUnauthenticatedIdentities: true
  cognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref cognitoIdentityPool
      Roles:
        authenticated: !GetAtt ApiGatewayInvokeRole.Arn
        unauthenticated: !GetAtt ApiGatewayInvokeRole.Arn
  ###################################
  # DynamoDB tables
  ###################################
  facesDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub RekogFaces${CollectionId}
      AttributeDefinitions: 
        - 
          AttributeName: "CollectionId"
          AttributeType: "S"
        - 
          AttributeName: "ExternalImageId"
          AttributeType: "S"
        - 
          AttributeName: "MemberName"
          AttributeType: "S"
        - 
          AttributeName: "JobTitle"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "CollectionId"
          KeyType: "HASH"
        - 
          AttributeName: "ExternalImageId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes: 
        - 
          IndexName: "geGSI"
          KeySchema: 
            - 
              AttributeName: "JobTitle"
              KeyType: "HASH"
            - 
              AttributeName: "MemberName"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "CollectionId"
              - "ExternalImageId"
            ProjectionType: "INCLUDE"
  sentimentDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub RekogSentiment${CollectionId}
      AttributeDefinitions: 
        - 
          AttributeName: "CollectionId"
          AttributeType: "S"
        - 
          AttributeName: "TimeDetected"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "CollectionId"
          KeyType: "HASH"
        - 
          AttributeName: "TimeDetected"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes: 
        - 
          IndexName: "gsiSentiment"
          KeySchema: 
            - 
              AttributeName: "CollectionId"
              KeyType: "HASH"
          Projection: 
            ProjectionType: "ALL"
  #######################
  # IAM Roles
  #######################
  RekognitionInvokeRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  DbReadRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  DbWriteRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  ApiGatewayInvokeRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Federated:
                - 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
  setupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: RekogDemo-setup-S3-fc
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 's3:*'
              Resource: '*'
        - PolicyName: RekogDemo-createRekColl
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 'rekognition:*'
              Resource: '*'
        - PolicyName: RekogDemo-cloudwatch-logs
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 'logs:*'
              Resource: 'arn:aws:logs:*:*:*'
  ########################################
  # API Gateway
  ########################################
  RestApi:
    Name: !Sub RekogDemo-${CollectionId}
    Type: AWS::Serverless::Api
    Properties:
      StageName: 'PROD'
      EndpointConfiguration: 'REGIONAL'
      DefinitionBody:
        swagger: 2.0
        info:
          version: 1.0
          title: !Sub RekogDemo-${CollectionId}
        basePath: "/PROD"
        paths:
          /engagement:
            get:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt DbReadRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        {
                          "results": [
                            #foreach($elem in $inputRoot.Items) {
                              "angry": "$elem.angry.S",
                              "confused": "$elem.confused.S",
                              "happy": "$elem.happy.S",
                              "sad": "$elem.sad.S",
                              "surprised": "$elem.surprised.S",
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${sentimentDynamoDBTable}",
                      "IndexName": "gsiSentiment",
                      "KeyConditionExpression": "CollectionId = :cid",
                      "FilterExpression": "TimeDetected >= :td",
                      "ProjectionExpression": "angry,confused,happy,sad,surprised",
                      "ExpressionAttributeValues": {
                        ":cid": {
                          "S": "${CollectionId}"
                        },
                        ":td": {
                          "S": "$input.params().querystring.get('timeDetected')"
                        }
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt  DbWriteRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {
                          "ok": true
                        }
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${sentimentDynamoDBTable}",
                      "Item": {
                        "CollectionId": {
                          "S": "${CollectionId}"
                        },
                        "TimeDetected": {
                          "N": "$input.json('$.timeDetected')"
                        },
                        "Angry": {
                          "S": "$input.json('$.angry')"
                        },
                        "Confused": {
                          "S": "$input.json('$.confused')"
                        },
                        "Happy": {
                          "S": "$input.json('$.happy')"
                        },
                        "Sad": {
                          "S": "$input.json('$.sad')"
                        },
                        "Surprised": {
                          "S": "$input.json('$.surprised')"
                        }
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
          /faces/detect:
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt RekognitionInvokeRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:rekognition:path//
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.header.X-Amz-Target: "'RekognitionService.DetectFaces'"
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: !Sub |
                    {
                      "Attributes": ["ALL"],
                      "Image": {
                        "Bytes": $input.json('$.image')
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
          /faces/search:
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt RekognitionInvokeRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:rekognition:path//
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.header.X-Amz-Target: "'RekognitionService.SearchFacesByImage'"
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: !Sub |
                    {
                      "CollectionId": "${CollectionId}",
                      "FaceMatchThreshold": 85,
                      "Image": {
                        "Bytes": $input.json('$.image')
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
          /people:
            get:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt DbReadRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        {
                          "people": [
                            #foreach($elem in $inputRoot.Items) {
                              "externalImageId": "$elem.ExternalImageId.S",
                              "memberName": "$elem.MemberName.S",
                              "jobTitle": "$elem.JobTitle.S"
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${facesDynamoDBTable}",
                      "KeyConditionExpression": "CollectionId = :cid",
                      "ProjectionExpression": "MemberName,JobTitle,ExternalImageId",
                      "ExpressionAttributeValues": {
                        ":cid": {
                          "S": "${CollectionId}"
                        }
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt DbWriteRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {
                          "ok": true
                        }
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${facesDynamoDBTable}",
                      "Key": {
                        "CollectionId": {
                          "S": "${CollectionId}"
                        },
                        "ExternalImageId": {
                          "S": "$input.json('$.externalImageId')"
                        }
                      },
                      "UpdateExpression": "set TimeDetected = :td",
                      "ExpressionAttributeValues": {
                        ":td": {
                          "N": "$input.json('$.timeDetected')"
                        }
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
  ############################
  # Lambda functions
  ############################
  lambdaSetup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub RekogDemoSetup${CollectionId}
      Runtime: nodejs8.10
      Handler: index.handler
      CodeUri: '../functions/setup/'
      Description: !Sub Custom Lambda resource for the ${CollectionId} Cloudformation Stack
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt setupLambdaRole.Arn
#####################################################
# Outputs
#####################################################
Outputs:
  url:
    Value: !Sub https://s3-${AWS::Region}.amazonaws.com/${clientS3Bucket}/index.html
    Description: Engagement meter URL